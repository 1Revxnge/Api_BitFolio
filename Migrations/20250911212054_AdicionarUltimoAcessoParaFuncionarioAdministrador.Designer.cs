// <auto-generated />
using System;
using ApiJobfy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApiJobfy.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250911212054_AdicionarUltimoAcessoParaFuncionarioAdministrador")]
    partial class AdicionarUltimoAcessoParaFuncionarioAdministrador
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApiJobfy.models.Administrador", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UltimoAcesso")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AdminId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("ApiJobfy.models.Candidato", b =>
                {
                    b.Property<Guid>("CandidatoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("CurriculoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurriculoId1")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EnderecoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UltimoAcesso")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CandidatoId");

                    b.HasIndex("CurriculoId")
                        .IsUnique();

                    b.HasIndex("CurriculoId1")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.ToTable("Candidatos");
                });

            modelBuilder.Entity("ApiJobfy.models.CandidatoVaga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidatoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VagaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CandidatoId");

                    b.HasIndex("VagaId");

                    b.ToTable("CandidatoVagas");
                });

            modelBuilder.Entity("ApiJobfy.models.Curriculo", b =>
                {
                    b.Property<Guid>("CurriculoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Certificacoes")
                        .HasColumnType("text");

                    b.Property<string>("CompetenciasTecnicas")
                        .HasColumnType("text");

                    b.Property<string>("Experiencias")
                        .HasColumnType("text");

                    b.Property<string>("Idiomas")
                        .HasColumnType("text");

                    b.Property<string>("Tecnologias")
                        .HasColumnType("text");

                    b.HasKey("CurriculoId");

                    b.ToTable("Curriculos");
                });

            modelBuilder.Entity("ApiJobfy.models.Empresa", b =>
                {
                    b.Property<Guid>("EmpresaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EnderecoId")
                        .HasColumnType("uuid");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("text");

                    b.HasKey("EmpresaId");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("ApiJobfy.models.Endereco", b =>
                {
                    b.Property<Guid>("EnderecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bairro")
                        .HasColumnType("text");

                    b.Property<string>("Cep")
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .HasColumnType("text");

                    b.Property<string>("Complemento")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .HasColumnType("text");

                    b.Property<string>("Numero")
                        .HasColumnType("text");

                    b.Property<string>("Rua")
                        .HasColumnType("text");

                    b.HasKey("EnderecoId");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("ApiJobfy.models.LogAdministrador", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Acao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DtAcao")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LogId");

                    b.HasIndex("AdminId");

                    b.ToTable("LogAdministradores");
                });

            modelBuilder.Entity("ApiJobfy.models.LogCandidato", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Acao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CandidatoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DtAcao")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LogId");

                    b.HasIndex("CandidatoId");

                    b.ToTable("LogCandidatos");
                });

            modelBuilder.Entity("ApiJobfy.models.LogRecrutador", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Acao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DtAcao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RecrutadorId")
                        .HasColumnType("uuid");

                    b.HasKey("LogId");

                    b.HasIndex("RecrutadorId");

                    b.ToTable("LogRecrutadores");
                });

            modelBuilder.Entity("ApiJobfy.models.Recrutador", b =>
                {
                    b.Property<Guid>("RecrutadorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EmpresaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UltimoAcesso")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RecrutadorId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmpresaId");

                    b.ToTable("Recrutadores");
                });

            modelBuilder.Entity("ApiJobfy.models.TokenTemporario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiraEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<bool>("Utilizado")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("TokenTemporario");
                });

            modelBuilder.Entity("ApiJobfy.models.Vaga", b =>
                {
                    b.Property<Guid>("VagaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAbertura")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataFechamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Escolaridade")
                        .HasColumnType("text");

                    b.Property<string>("Modelo")
                        .HasColumnType("text");

                    b.Property<string>("Nivel")
                        .HasColumnType("text");

                    b.Property<string>("Requisitos")
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VagaId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Vagas");
                });

            modelBuilder.Entity("ApiJobfy.models.VagaFavorita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidatoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VagaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VagaId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CandidatoId");

                    b.HasIndex("VagaId");

                    b.HasIndex("VagaId1");

                    b.ToTable("VagasFavoritas");
                });

            modelBuilder.Entity("ApiJobfy.models.Candidato", b =>
                {
                    b.HasOne("ApiJobfy.models.Curriculo", "Curriculo")
                        .WithOne()
                        .HasForeignKey("ApiJobfy.models.Candidato", "CurriculoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApiJobfy.models.Curriculo", null)
                        .WithOne("Candidato")
                        .HasForeignKey("ApiJobfy.models.Candidato", "CurriculoId1");

                    b.HasOne("ApiJobfy.models.Endereco", "Endereco")
                        .WithOne("Candidato")
                        .HasForeignKey("ApiJobfy.models.Candidato", "EnderecoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Curriculo");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("ApiJobfy.models.CandidatoVaga", b =>
                {
                    b.HasOne("ApiJobfy.models.Candidato", "Candidato")
                        .WithMany("CandidatoVagas")
                        .HasForeignKey("CandidatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiJobfy.models.Vaga", "Vaga")
                        .WithMany("CandidatoVagas")
                        .HasForeignKey("VagaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidato");

                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("ApiJobfy.models.Empresa", b =>
                {
                    b.HasOne("ApiJobfy.models.Endereco", "Endereco")
                        .WithOne("Empresa")
                        .HasForeignKey("ApiJobfy.models.Empresa", "EnderecoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("ApiJobfy.models.LogAdministrador", b =>
                {
                    b.HasOne("ApiJobfy.models.Administrador", "Administrador")
                        .WithMany("Logs")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrador");
                });

            modelBuilder.Entity("ApiJobfy.models.LogCandidato", b =>
                {
                    b.HasOne("ApiJobfy.models.Candidato", "Candidato")
                        .WithMany("Logs")
                        .HasForeignKey("CandidatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidato");
                });

            modelBuilder.Entity("ApiJobfy.models.LogRecrutador", b =>
                {
                    b.HasOne("ApiJobfy.models.Recrutador", "Recrutador")
                        .WithMany("Logs")
                        .HasForeignKey("RecrutadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recrutador");
                });

            modelBuilder.Entity("ApiJobfy.models.Recrutador", b =>
                {
                    b.HasOne("ApiJobfy.models.Empresa", "Empresa")
                        .WithMany("Recrutadores")
                        .HasForeignKey("EmpresaId");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("ApiJobfy.models.Vaga", b =>
                {
                    b.HasOne("ApiJobfy.models.Empresa", "Empresa")
                        .WithMany("Vagas")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("ApiJobfy.models.VagaFavorita", b =>
                {
                    b.HasOne("ApiJobfy.models.Candidato", "Candidato")
                        .WithMany("VagasFavoritas")
                        .HasForeignKey("CandidatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiJobfy.models.Vaga", "Vaga")
                        .WithMany()
                        .HasForeignKey("VagaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiJobfy.models.Vaga", null)
                        .WithMany("Favoritos")
                        .HasForeignKey("VagaId1");

                    b.Navigation("Candidato");

                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("ApiJobfy.models.Administrador", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("ApiJobfy.models.Candidato", b =>
                {
                    b.Navigation("CandidatoVagas");

                    b.Navigation("Logs");

                    b.Navigation("VagasFavoritas");
                });

            modelBuilder.Entity("ApiJobfy.models.Curriculo", b =>
                {
                    b.Navigation("Candidato");
                });

            modelBuilder.Entity("ApiJobfy.models.Empresa", b =>
                {
                    b.Navigation("Recrutadores");

                    b.Navigation("Vagas");
                });

            modelBuilder.Entity("ApiJobfy.models.Endereco", b =>
                {
                    b.Navigation("Candidato");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("ApiJobfy.models.Recrutador", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("ApiJobfy.models.Vaga", b =>
                {
                    b.Navigation("CandidatoVagas");

                    b.Navigation("Favoritos");
                });
#pragma warning restore 612, 618
        }
    }
}
